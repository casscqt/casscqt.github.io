<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cass的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://casscqt.github.io/"/>
  <updated>2016-12-15T12:23:26.000Z</updated>
  <id>https://casscqt.github.io/</id>
  
  <author>
    <name>Cass</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iO 关于NavigationBar、NavigationItem的记录</title>
    <link href="https://casscqt.github.io/2016/12/15/iO-%E5%85%B3%E4%BA%8ENavigationBar%E3%80%81NavigationItem%E7%9A%84%E8%AE%B0%E5%BD%95/"/>
    <id>https://casscqt.github.io/2016/12/15/iO-关于NavigationBar、NavigationItem的记录/</id>
    <published>2016-12-15T03:43:29.000Z</published>
    <updated>2016-12-15T12:23:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前言：经常遇到这样的需求：从有导航栏的界面跳转到导航栏透明的界面，由于iOS从有导航栏跳转到透明导航栏界面，并且设置hideBottomWhenPush属性会有<a href="http://www.jianshu.com/p/e3ca1b7b6cec" target="_blank" rel="external">bug</a>，即导航栏会有黑影。我采取将导航栏控制的navigationbar进行隐藏，自己在viewcontroller添加一个navigationbar以实现需求。过程中没有理解清楚navigationbar和navigationItem，这里简单记录一下。</p>
</blockquote>
<h2 id="NavigationBar"><a href="#NavigationBar" class="headerlink" title="NavigationBar"></a>NavigationBar</h2><blockquote>
<p>The navigation bar displays information from a stack of UINavigationItem objects. At any given time, the UINavigationItem that is currently the topItem of the stack determines the title and other optional information in the navigation bar, such as the right button and prompt.</p>
</blockquote>
<p>翻译：navigationbar 展示通过一个栈对象navgationItem来展示信息，栈顶的navgationItem对象决定着导航标题和其他信息，例如导航栏右边提示按钮。<br><a id="more"></a><br>这里可以得知如果想管理navigationbar上面的左右按钮，标题信息，则需要创建一个navigationItem对象，对navigationItem进行设置后再push,pop等操作进入到navigationbar的栈中。而如果管理样式，则通过属性控制或者修改子控件。navigationbar的层级结构如下：<br><img src="http://upload-images.jianshu.io/upload_images/132693-6058a24ae2b6d17a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="navigationbar层级结构.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/132693-92f2fccb1d9f793f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>结构中看出：<br>默认navigationbar高度为44点，但navigationbar的View却有84点的高度，iOS7以后对背景进行了延伸。View中有背景图View、底部线条View还有图中红色框部分的按钮等控件。设置导航栏透明经常对背景图与底部线条设置为透明的图片。</p>
<p>navigationController下默认有一个navigationBar，这是navigationController管理下所有viewcontroller共用的。对于某个页面设置导航栏透明，滑动渐变效果，可以让navigationController的隐藏掉，自己给每个viewcontroller增加一个navigationBar，对这个navigationBar进行处理。退出界面后将导航栏恢复显示。这个方案也是上面推荐链接一个方案之一。这样可以避免一些因为设置导航栏透明，在界面中跳转带来的系统bug。</p>
<h2 id="NavigationItem"><a href="#NavigationItem" class="headerlink" title="NavigationItem"></a>NavigationItem</h2><p><img src="http://upload-images.jianshu.io/upload_images/132693-721aa1698ae761d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="NavigationItem属性.png"><br>NavigationItem是UIViewController的属性，这也是导航器管理下的viewcontroller中进行设置的原因：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.navigationItem.title = @&quot;title&quot;;</div></pre></td></tr></table></figure></p>
<p>而不是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.navigationController.navigationItem.title = @&quot;title&quot;;</div></pre></td></tr></table></figure></p>
<p>思考了一下navigationItem为什么是viewcontroller的属性，而不是navigationbar的属性呢？因为navigationbar是栈的方式管理navigationItem。navigationcontroller每次push或者pop一个viewcontroller，其实也执行了对navigationbar执行了push or pop item。这样每个viewcontroller拥有自己的navigationItem，则可以订制自己的页面导航栏。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>1.<a href="http://www.jianshu.com/p/e3ca1b7b6cec" target="_blank" rel="external">http://www.jianshu.com/p/e3ca1b7b6cec</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：经常遇到这样的需求：从有导航栏的界面跳转到导航栏透明的界面，由于iOS从有导航栏跳转到透明导航栏界面，并且设置hideBottomWhenPush属性会有&lt;a href=&quot;http://www.jianshu.com/p/e3ca1b7b6cec&quot;&gt;bug&lt;/a&gt;，即导航栏会有黑影。我采取将导航栏控制的navigationbar进行隐藏，自己在viewcontroller添加一个navigationbar以实现需求。过程中没有理解清楚navigationbar和navigationItem，这里简单记录一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;NavigationBar&quot;&gt;&lt;a href=&quot;#NavigationBar&quot; class=&quot;headerlink&quot; title=&quot;NavigationBar&quot;&gt;&lt;/a&gt;NavigationBar&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;The navigation bar displays information from a stack of UINavigationItem objects. At any given time, the UINavigationItem that is currently the topItem of the stack determines the title and other optional information in the navigation bar, such as the right button and prompt.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;翻译：navigationbar 展示通过一个栈对象navgationItem来展示信息，栈顶的navgationItem对象决定着导航标题和其他信息，例如导航栏右边提示按钮。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>零碎笔记</title>
    <link href="https://casscqt.github.io/2016/12/03/%E9%9B%B6%E7%A2%8E%E7%AC%94%E8%AE%B0/"/>
    <id>https://casscqt.github.io/2016/12/03/零碎笔记/</id>
    <published>2016-12-03T07:05:01.000Z</published>
    <updated>2016-12-03T07:05:29.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RunLoop"><a href="#RunLoop" class="headerlink" title="RunLoop"></a>RunLoop</h3><p>一，什么是runloop?</p>
<ul>
<li>1、runloop从字面来说是指：运行循环。  </li>
<li>2、在代码实现上，runloop内部实质上是一个do-while循环。会不断的检测source、observer、timer等事件。  </li>
<li>3、runloop要保活，必须要在指定的mode里面添加事件源 (source,timer)</li>
<li>4、在OC里，runloop的使用是懒加载，当第一次调用[NSRunLoop currentRunLoop]时，内部会自动创建一个runloop，并且在创建子线程的runloop时，首先就会检测主线程的runloop是否已存在，不存在也会创建，所以iOS里面主线程和主运行循环系统会自动帮我们创建好。  </li>
</ul>
<p>二、runloop与线程的关系？<br>一个线程对应一个runloop，在源码内部，线程作为key、runloop作为value.<br><a id="more"></a><br>三、runloop有哪些mode?区分这些mode的好处？<br>苹果公开的有：NSDefaultRunLoopMode (对应 kCFRunLoopDefaultMode) （主运行循环默认就在这个模式）NSRunLoopCommonModes（对应 kCFRunLoopCommonModes）这个并不是真正的模式，他是一组mode，打上common标记的mode有（NSDefaultRunLoopMode和UITrackingRunLoopMode）苹果没有公开的mode主要是UITrackingRunLoopMode<br>分开多个mode的好处是能够让runloop在同一时刻处理一种类型的事件（也就是方便分别事件等级）。比如用户处理拖拽事件的时候，runloop就专心处理TrackingMode。  </p>
<p>四、runloop的实际使用场景有哪些？</p>
<ul>
<li>1、实现一个常驻子线程。像系统的主线程就是一个常驻线程。实现子线程常驻就需要在子线程创建一个runloop，并且要保活这个runloop.(也就是在这个runloop中添加事件，比如source、observer、timer)  </li>
<li>2、改变runloop的mode，比如定时器创建时，默认是在NSDefaultRunLoopMode下面，如果要能够在拖拽模式下也能执行，需要改变定时器的runmode。另外NSURLConnection默认也是放在默认模式下，在tableView滑动的时候，要想能够下载，也需要改变runmode。     </li>
</ul>
<p>参考地址：<br><a href="http://blog.ibireme.com/2015/05/18/runloop/" target="_blank" rel="external">http://blog.ibireme.com/2015/05/18/runloop/</a><br><a href="http://www.jianshu.com/p/d260d18dd551" target="_blank" rel="external">http://www.jianshu.com/p/d260d18dd551</a><br>常驻子线程创建：<a href="http://www.jianshu.com/p/0b082ab5a494" target="_blank" rel="external">http://www.jianshu.com/p/0b082ab5a494</a><br>比较容易理解且好的文章：<a href="http://www.cnblogs.com/zy1987/p/4582466.html" target="_blank" rel="external">http://www.cnblogs.com/zy1987/p/4582466.html</a></p>
<h3 id="内链函数"><a href="#内链函数" class="headerlink" title="内链函数"></a>内链函数</h3><p>一、作用：<br>解决函数调用效率的问题</p>
<ul>
<li>函数之间调用，是内存地址之间的调用，当函数调用完毕之后还会返回原来函数执行的地址。函数调用有时间开销，内联函数就是为了解决这一问题。</li>
<li>不用inline修饰的函数, 汇编时会出现 call 指令.调用call指令就是就需要：<br>(1)将下一条指令的所在地址入栈<br>(2)并将子程序的起始地址送入PC（于是CPU的下一条指令就会转去执行子程序）.</li>
</ul>
<p>二、使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// 或者采用系统的宏 UIKIT_STATIC_INLINE</div><div class="line">// UIKIT_STATIC_INLINECGFloat CGFloatFromPixel(CGFloat value) &#123;</div><div class="line">//     return value / YYScreenScale();</div><div class="line">// &#125;</div><div class="line">static inline CGFloat CGFloatFromPixel(CGFloat value) &#123;</div><div class="line">    return value / YYScreenScale();</div><div class="line">&#125;</div><div class="line"></div><div class="line">//YYScreenScale()方法说明:</div><div class="line">CGFloat YYScreenScale() &#123;</div><div class="line">    static CGFloat scale;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        scale = [UIScreen mainScreen].scale;</div><div class="line">    &#125;);</div><div class="line">    return scale;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>三、使用场景：<br>适合与小内存函数，频繁执行的函数。</p>
<p>四、参考地址：<br><a href="http://www.cnblogs.com/sixindev/p/4469144.html" target="_blank" rel="external">http://www.cnblogs.com/sixindev/p/4469144.html</a><br><a href="http://www.jianshu.com/p/d557b0831c6a" target="_blank" rel="external">http://www.jianshu.com/p/d557b0831c6a</a><br><a href="http://www.jianshu.com/p/a4b77a1157b1" target="_blank" rel="external">http://www.jianshu.com/p/a4b77a1157b1</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;RunLoop&quot;&gt;&lt;a href=&quot;#RunLoop&quot; class=&quot;headerlink&quot; title=&quot;RunLoop&quot;&gt;&lt;/a&gt;RunLoop&lt;/h3&gt;&lt;p&gt;一，什么是runloop?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、runloop从字面来说是指：运行循环。  &lt;/li&gt;
&lt;li&gt;2、在代码实现上，runloop内部实质上是一个do-while循环。会不断的检测source、observer、timer等事件。  &lt;/li&gt;
&lt;li&gt;3、runloop要保活，必须要在指定的mode里面添加事件源 (source,timer)&lt;/li&gt;
&lt;li&gt;4、在OC里，runloop的使用是懒加载，当第一次调用[NSRunLoop currentRunLoop]时，内部会自动创建一个runloop，并且在创建子线程的runloop时，首先就会检测主线程的runloop是否已存在，不存在也会创建，所以iOS里面主线程和主运行循环系统会自动帮我们创建好。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二、runloop与线程的关系？&lt;br&gt;一个线程对应一个runloop，在源码内部，线程作为key、runloop作为value.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS 验证码View的实现方案</title>
    <link href="https://casscqt.github.io/2016/11/19/iOS-%E9%AA%8C%E8%AF%81%E7%A0%81View%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/"/>
    <id>https://casscqt.github.io/2016/11/19/iOS-验证码View的实现方案/</id>
    <published>2016-11-19T13:08:46.000Z</published>
    <updated>2016-12-03T07:06:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本以为实现一个输入验证码的界面是很容易，但是没想到交互起来还是挺麻烦的。例如下图的验证码输入校验，在许多场景下会使用到类似验证码显示与输入。这里记录一下实现的过程，踩过的坑与比较好的方案。这个过程重新去了解了drawRect方法，使用了IBInspectable和IB_DESIGNABLE，封装控件（代码与xib都可用)。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/132693-b6520d0f79104517.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="需求效果图.png"><br><a id="more"></a></p>
<h1 id="尝试方案"><a href="#尝试方案" class="headerlink" title="尝试方案"></a>尝试方案</h1><p>一开始实现时，我添加4个textField作为这4个验证码的显示与输入。接着添加响应事件与代理实现输入一个验证码后，焦点跳转下一个验证码。正向流程没有问题，但在使用退格键时，焦点需要回到上一个。这里就出现了一个坑，textField内容为空，监听不到退格键的使用。网上也搜寻相关方案，但是都没有好的办法。看到一个做法是插入在textField为空，插入一个字符（一个没有显示宽度的字符），此时再按退格键就可以监听删除内容。</p>
<h1 id="推荐方案"><a href="#推荐方案" class="headerlink" title="推荐方案"></a>推荐方案</h1><p>在网上查找相关实现的方案，参考不多，笔者看到了一个<a href="http://www.jb51.net/article/77841.htm" target="_blank" rel="external">链接</a>，如果还有更好推荐留言一下。<br>实现原理是：使用一个Label来显示每一位验证码。使用一个隐藏TextField来接收输入。将TextField上编辑的内容显示到Label上。这样就不会有太多交互细节需要处理，就像这个验证码的View是一个TextField一样（实际上也是）。</p>
<h1 id="封装与使用"><a href="#封装与使用" class="headerlink" title="封装与使用"></a>封装与使用</h1><p>将它进行了整理与封装优化：</p>
<ul>
<li>适用于带边框显示的验证码样式。</li>
<li>Label 显示drawRect时，添加边框，边框默认是显示矩形区域外部的，进行了处理，显示在矩形区域内。  </li>
<li>添加间距，边框宽度等参数，正确显示边框与文本。</li>
<li>优化支持xib中使用控件。</li>
<li>优化支持xcode及时显示UI。</li>
<li>接口简单易用。</li>
</ul>
<h2 id="文件结构："><a href="#文件结构：" class="headerlink" title="文件结构："></a>文件结构：</h2><p><img src="http://upload-images.jianshu.io/upload_images/132693-d5343f740e29e9df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="文件结构.png"></p>
<h2 id="封装的Label"><a href="#封装的Label" class="headerlink" title="封装的Label:"></a>封装的Label:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">- (void)drawRect:(CGRect)rect &#123;</div><div class="line">    </div><div class="line">    // 第一次drawRect rect的数值不正确，不知道为什么，麻烦有知道的issue下我。这里处理了一下。</div><div class="line">    rect.size.width = rect.size.width &gt; self.bounds.size.width ? self.bounds.size.width : rect.size.width;</div><div class="line">    rect.size.height = rect.size.height &gt; self.bounds.size.height ? self.bounds.size.height : rect.size.height;</div><div class="line">    </div><div class="line">    //计算每位验证码/密码的所在区域的宽和高</div><div class="line">    float width = (rect.size.width - (self.numberOfVertificationCode -1) * self.spacing)/ (float)self.numberOfVertificationCode;;</div><div class="line">    float height = rect.size.height;</div><div class="line">    </div><div class="line">    // 画矩形边框 （边框会显示到rect区域外，进行了处理）</div><div class="line">    for (int i = 0; i &lt; self.numberOfVertificationCode; i++) &#123;</div><div class="line">        // 计算每位验证码/密码的绘制区域</div><div class="line">        CGRect tempRect = CGRectMake(i * (width +self.spacing) + self.lineWidth, self.lineWidth, width - self.lineWidth*2, height - self.lineWidth*2);</div><div class="line">        CGContextRef context = UIGraphicsGetCurrentContext();</div><div class="line">        CGContextSetLineWidth(context, self.lineWidth);</div><div class="line">        CGContextSetStrokeColorWithColor(context, self.borderColor.CGColor);</div><div class="line">        UIBezierPath *bezierPath = [UIBezierPath bezierPathWithRoundedRect:tempRect cornerRadius:self.cornerRadius];</div><div class="line">        CGContextAddPath(context, bezierPath.CGPath);</div><div class="line">        CGContextStrokePath(context);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 将每位验证码/密码绘制到指定区域</div><div class="line">    for (int i = 0; i &lt; self.text.length; i++) &#123;</div><div class="line">        CGRect tempRect = CGRectMake(i * (width +self.spacing) +self.lineWidth, self.lineWidth, width - self.lineWidth * 2, height - self.lineWidth*2);</div><div class="line">        // 遍历验证码/密码的每个字符</div><div class="line">        NSString *charecterString = [NSString stringWithFormat:@&quot;%c&quot;, [self.text characterAtIndex:i]];</div><div class="line">        // 设置验证码/密码的现实属性</div><div class="line">        NSMutableDictionary *attributes = [[NSMutableDictionary alloc] init];</div><div class="line">        attributes[NSFontAttributeName] = self.font;</div><div class="line">        attributes[NSForegroundColorAttributeName] = self.textColor;</div><div class="line">        // 计算每位验证码的绘制起点</div><div class="line">        // 计算每位验证码的在指定样式下的size</div><div class="line">        CGSize characterSize = [charecterString sizeWithAttributes:attributes];</div><div class="line">        CGPoint vertificationCodeDrawStartPoint = CGPointMake(CGRectGetMidX(tempRect) - characterSize.width /2, CGRectGetMidY(tempRect) - characterSize.height /2);</div><div class="line">        // 绘制验证码</div><div class="line">        [charecterString drawAtPoint:vertificationCodeDrawStartPoint withAttributes:attributes];   </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="xib中使用："><a href="#xib中使用：" class="headerlink" title="xib中使用："></a>xib中使用：</h2><p>直接拖一个view，修改xib中类名即可，可通过如图设置属性。<br><img src="http://upload-images.jianshu.io/upload_images/132693-71b27fc32f5214ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="xib内使用.png"></p>
<h2 id="代码中使用："><a href="#代码中使用：" class="headerlink" title="代码中使用："></a>代码中使用：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (QTVertificationCodeInputView *)vertificationCodeInputView&#123;</div><div class="line">    if (!_vertificationCodeInputView) &#123;</div><div class="line">        _vertificationCodeInputView = [[QTVertificationCodeInputView alloc]initWithFrame:CGRectMake(30, 100, 300, 200)];</div><div class="line">        _vertificationCodeInputView.numberOfVertificationCode = 4;</div><div class="line">        _vertificationCodeInputView.lineWidth = 10;</div><div class="line">        _vertificationCodeInputView.spacing = 10;</div><div class="line">        _vertificationCodeInputView.cornerRadius = 5;</div><div class="line">        _vertificationCodeInputView.backgroundColor = [UIColor orangeColor];</div><div class="line">    &#125;</div><div class="line">    return _vertificationCodeInputView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><p>UILabel初始化第一次调用的drawRect，rect的值并不是设置frame的值，而是稍微大了一点，不知道为什么不对，麻烦有知道的issue下我。这里处理了一下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (void)drawRect:(CGRect)rect &#123;</div><div class="line">    // 第一次drawRect rect的数值不正确，不知道为什么，麻烦有知道的issue下我。这里处理了一下。</div><div class="line">    rect.size.width = rect.size.width &gt; self.bounds.size.width ? self.bounds.size.width : rect.size.width;</div><div class="line">    rect.size.height = rect.size.height &gt; self.bounds.size.height ? self.bounds.size.height : rect.size.height;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>工程文件在github上：<a href="https://github.com/casscqt/QTVertificationCodeInputView" target="_blank" rel="external">https://github.com/casscqt/QTVertificationCodeInputView</a><br>参考链接：<a href="http://www.jb51.net/article/77841.htm" target="_blank" rel="external">这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本以为实现一个输入验证码的界面是很容易，但是没想到交互起来还是挺麻烦的。例如下图的验证码输入校验，在许多场景下会使用到类似验证码显示与输入。这里记录一下实现的过程，踩过的坑与比较好的方案。这个过程重新去了解了drawRect方法，使用了IBInspectable和IB_DESIGNABLE，封装控件（代码与xib都可用)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/132693-b6520d0f79104517.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300&quot; alt=&quot;需求效果图.png&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS Label最后一行中间截图显示缩略符</title>
    <link href="https://casscqt.github.io/2016/10/30/iOS-Label%E6%9C%80%E5%90%8E%E4%B8%80%E8%A1%8C%E4%B8%AD%E9%97%B4%E6%88%AA%E5%9B%BE%E6%98%BE%E7%A4%BA%E7%BC%A9%E7%95%A5%E7%AC%A6/"/>
    <id>https://casscqt.github.io/2016/10/30/iOS-Label最后一行中间截图显示缩略符/</id>
    <published>2016-10-30T01:33:49.000Z</published>
    <updated>2016-12-03T07:07:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>继上次本文本有行间距，当时交互有另一个需求，需要在文本最后一行省略符号放中间，只省略到最后一行的中间。如下图需求。Label的自带LineBreakMode不支持如下的设置。便要自己处理，经过网上的资料参考和同事J学习探讨，这里记录一下解决方案与过程。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/132693-51916dc2ba856926.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图1.png"></p>
<h2 id="二、分析"><a href="#二、分析" class="headerlink" title="二、分析"></a>二、分析</h2><p>文本只需要最后一行进行处理，因此取得能取得文本最后一行，并进行计算，当最后一行的文本超过中间，则截取字符到中间，并增加一个“…”字符串。</p>
<h2 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h2><p>核心方法为网上大神所写获得Label每行文本字符串数组的方法，对拿到的最后一行进行处理。处理方式还是要利用获取每行文本的方法，传入一个显示label宽度的一半label。这时计算出来的最后一行的点点点省略号，误差就在一个字符。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//获得Label每行的文本字符串数组</div><div class="line">- (NSArray *)getLinesArrayOfStringInLabel:(UILabel *)label&#123;</div><div class="line">    NSString *text = [label text];</div><div class="line">    UIFont *font = [label font];</div><div class="line">    CGRect rect = [label bounds];</div><div class="line"></div><div class="line">    CTFontRef myFont = CTFontCreateWithName((__bridge CFStringRef)([font fontName]), [font pointSize], NULL);</div><div class="line">    NSMutableAttributedString *attStr = [[NSMutableAttributedString alloc] initWithString:text];</div><div class="line">    [attStr addAttribute:(NSString *)kCTFontAttributeName value:(__bridge id)myFont range:NSMakeRange(0, attStr.length)];</div><div class="line">    CTFramesetterRef frameSetter = CTFramesetterCreateWithAttributedString((__bridge CFAttributedStringRef)attStr);</div><div class="line">    CGMutablePathRef path = CGPathCreateMutable();</div><div class="line">    CGPathAddRect(path, NULL, CGRectMake(0,0,rect.size.width,100000));</div><div class="line">    CTFrameRef frame = CTFramesetterCreateFrame(frameSetter, CFRangeMake(0, 0), path, NULL);</div><div class="line">    NSArray *lines = (__bridge NSArray *)CTFrameGetLines(frame);</div><div class="line">    NSMutableArray *linesArray = [[NSMutableArray alloc]init];</div><div class="line">    for (id line in lines)&#123;</div><div class="line">        CTLineRef lineRef = (__bridge CTLineRef )line;</div><div class="line">        CFRange lineRange = CTLineGetStringRange(lineRef);</div><div class="line">        NSRange range = NSMakeRange(lineRange.location, lineRange.length);</div><div class="line">        NSString *lineString = [text substringWithRange:range];</div><div class="line">        [linesArray addObject:lineString];</div><div class="line">    &#125;</div><div class="line">    return (NSArray *)linesArray;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再利用此方法处理最后一行文本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">//Label每行文本数组</div><div class="line"> NSArray *separatedLines = [NSString getSeparatedLinesFromLabel:self.label];</div><div class="line">    </div><div class="line">    NSMutableString *limitedText = [NSMutableString string];</div><div class="line">    if ( separatedLines.count &gt;= self.label.numberOfLines ) &#123;//当超过最大行数</div><div class="line">        for (int i = 0 ; i &lt; self.label.numberOfLines; i++) &#123;</div><div class="line">            if ( i == self.label.numberOfLines - 1) &#123;//处理最后一行文本</div><div class="line">                UILabel *lastLineLabel = [[UILabel alloc]initWithFrame:CGRectMake(0, 0, self.label.frame.size.width/2, MAXFLOAT)];</div><div class="line">                lastLineLabel.text = separatedLines[self.label.numberOfLines - 1];</div><div class="line">                NSArray *subSeparatedLines = [NSString getSeparatedLinesFromLabel:lastLineLabel];</div><div class="line">                NSString *lastLineText = [subSeparatedLines firstObject];</div><div class="line">                NSInteger lastLineTextCount = lastLineText.length;</div><div class="line">                [limitedText appendString:[NSString stringWithFormat:@&quot;%@...&quot;,[lastLineText substringToIndex:lastLineTextCount]]];</div><div class="line">            &#125;else&#123;//非最后一行，则将文本进行存储</div><div class="line">                [limitedText appendString:separatedLines[i]];</div><div class="line">            &#125;</div><div class="line">        &#125;  </div><div class="line">    &#125;else&#123;</div><div class="line">        [limitedText appendString:self.text];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">self.label.text = limitedText;</div></pre></td></tr></table></figure>
<h2 id="四、封装与使用"><a href="#四、封装与使用" class="headerlink" title="四、封装与使用"></a>四、封装与使用</h2><p>写一个Label分类，对需要进行最后一行中间省略号的Label调用一下 setLineBreakByTruncatingLastLineMiddle 方法，同时需要设置一下最大行数numberOfLines。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">#import &quot;UILabel+QT.h&quot;</div><div class="line">#import &lt;CoreText/CoreText.h&gt;</div><div class="line"></div><div class="line">@implementation UILabel (QT)</div><div class="line"></div><div class="line">- (void)setLineBreakByTruncatingLastLineMiddle&#123;</div><div class="line"></div><div class="line">    if ( self.numberOfLines &lt;= 0 ) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    NSArray *separatedLines = [self getSeparatedLinesArray];</div><div class="line">    </div><div class="line">    NSMutableString *limitedText = [NSMutableString string];</div><div class="line">    if ( separatedLines.count &gt;= self.numberOfLines ) &#123;</div><div class="line">        </div><div class="line">        for (int i = 0 ; i &lt; self.numberOfLines; i++) &#123;</div><div class="line">            if ( i == self.numberOfLines - 1) &#123;</div><div class="line">                UILabel *lastLineLabel = [[UILabel alloc]initWithFrame:CGRectMake(0, 0, self.frame.size.width/2, MAXFLOAT)];</div><div class="line">                lastLineLabel.text = separatedLines[self.numberOfLines - 1];</div><div class="line">                </div><div class="line">                NSArray *subSeparatedLines = [lastLineLabel getSeparatedLinesArray];</div><div class="line">                NSString *lastLineText = [subSeparatedLines firstObject];</div><div class="line">                NSInteger lastLineTextCount = lastLineText.length;</div><div class="line">                [limitedText appendString:[NSString stringWithFormat:@&quot;%@...&quot;,[lastLineText substringToIndex:lastLineTextCount]]];</div><div class="line">            &#125;else&#123;</div><div class="line">                [limitedText appendString:separatedLines[i]];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">    &#125;else&#123;</div><div class="line">        [limitedText appendString:self.text];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    self.text = limitedText;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSArray *)getSeparatedLinesArray</div><div class="line">&#123;</div><div class="line">    NSString *text = [self text];</div><div class="line">    UIFont   *font = [self font];</div><div class="line">    CGRect    rect = [self frame];</div><div class="line">    </div><div class="line">    CTFontRef myFont = CTFontCreateWithName((__bridge CFStringRef)([font fontName]), [font pointSize], NULL);</div><div class="line">    NSMutableAttributedString *attStr = [[NSMutableAttributedString alloc] initWithString:text];</div><div class="line">    [attStr addAttribute:(NSString *)kCTFontAttributeName value:(__bridge id)myFont range:NSMakeRange(0, attStr.length)];</div><div class="line">    </div><div class="line">    CTFramesetterRef frameSetter = CTFramesetterCreateWithAttributedString((__bridge CFAttributedStringRef)attStr);</div><div class="line">    </div><div class="line">    CGMutablePathRef path = CGPathCreateMutable();</div><div class="line">    CGPathAddRect(path, NULL, CGRectMake(0,0,rect.size.width,100000));</div><div class="line">    </div><div class="line">    CTFrameRef frame = CTFramesetterCreateFrame(frameSetter, CFRangeMake(0, 0), path, NULL);</div><div class="line">    </div><div class="line">    NSArray *lines = (__bridge NSArray *)CTFrameGetLines(frame);</div><div class="line">    NSMutableArray *linesArray = [[NSMutableArray alloc]init];</div><div class="line">    </div><div class="line">    for (id line in lines)</div><div class="line">    &#123;</div><div class="line">        CTLineRef lineRef = (__bridge CTLineRef )line;</div><div class="line">        CFRange lineRange = CTLineGetStringRange(lineRef);</div><div class="line">        NSRange range = NSMakeRange(lineRange.location, lineRange.length);</div><div class="line">        </div><div class="line">        NSString *lineString = [text substringWithRange:range];</div><div class="line">        [linesArray addObject:lineString];</div><div class="line">    &#125;</div><div class="line">    return (NSArray *)linesArray;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<h2 id="五、思考"><a href="#五、思考" class="headerlink" title="五、思考"></a>五、思考</h2><blockquote>
<p>系统可以直接Label的lineBreakMode，如果可以给系统lineBreakMode增加一个枚举类型NSLineBreakByTruncatingLastLineMiddle，那在使用的时候，直接设置一下就好了是该多方便。不知道这个想法的可行性，需要学习了解看看。如果后续有这样的解决方案，再来补充。</p>
</blockquote>
<p>经过探讨，想给系统lineBreakMode增加一个枚举还是行不通的，毕竟系统的代码没有开源，其次，要是能修改也是自己能用。所以，遇到这种情况，可以写一个类方法，或者是给类增加一个属性，例如otherLineBreakMode，进行处理。</p>
<h2 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h2><p><a href="http://stackoverflow.com/questions/34867231/issue-get-lines-array-of-string-inn-label" target="_blank" rel="external">http://stackoverflow.com/questions/34867231/issue-get-lines-array-of-string-inn-label</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;继上次本文本有行间距，当时交互有另一个需求，需要在文本最后一行省略符号放中间，只省略到最后一行的中间。如下图需求。Label的自带LineBreakMode不支持如下的设置。便要自己处理，经过网上的资料参考和同事J学习探讨，这里记录一下解决方案与过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/132693-51916dc2ba856926.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图1.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;二、分析&quot;&gt;&lt;a href=&quot;#二、分析&quot; class=&quot;headerlink&quot; title=&quot;二、分析&quot;&gt;&lt;/a&gt;二、分析&lt;/h2&gt;&lt;p&gt;文本只需要最后一行进行处理，因此取得能取得文本最后一行，并进行计算，当最后一行的文本超过中间，则截取字符到中间，并增加一个“…”字符串。&lt;/p&gt;
&lt;h2 id=&quot;三、解决方案&quot;&gt;&lt;a href=&quot;#三、解决方案&quot; class=&quot;headerlink&quot; title=&quot;三、解决方案&quot;&gt;&lt;/a&gt;三、解决方案&lt;/h2&gt;&lt;p&gt;核心方法为网上大神所写获得Label每行文本字符串数组的方法，对拿到的最后一行进行处理。处理方式还是要利用获取每行文本的方法，传入一个显示label宽度的一半label。这时计算出来的最后一行的点点点省略号，误差就在一个字符。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS中文行间距富文本高度与显示那些坑</title>
    <link href="https://casscqt.github.io/2016/10/23/iOS%E4%B8%AD%E6%96%87%E8%A1%8C%E9%97%B4%E8%B7%9D%E5%AF%8C%E6%96%87%E6%9C%AC%E9%AB%98%E5%BA%A6%E4%B8%8E%E6%98%BE%E7%A4%BA%E9%82%A3%E4%BA%9B%E5%9D%91/"/>
    <id>https://casscqt.github.io/2016/10/23/iOS中文行间距富文本高度与显示那些坑/</id>
    <published>2016-10-23T01:06:38.000Z</published>
    <updated>2016-12-03T07:07:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>前段时间来了一个新设计，将App的风格修改了一遍。在显示文字时，增加了行间距。原本以为只是展示和计算高度的时候添加上富文本的lineSpace属性即可，但是结果在显示一行中文的时候，却怎么也计算字体的时候多了一个行间距的高度，展示的Label也多了一个行间距的高度。经过查找资料，网上也有人遇到同样的坑。计算高度时，需要将判断一下是否中文与一行，如果是一行带中文并且有行间距，此时总体高度应该减去行间距。展示的Label如果用的是自适应高度，也应该做一下判断，一行中文带行间距时，不设置Label的lineSpace属性。如果你也遇到这样坑，可以通过本文章的Demo解决，并封装好一些方法，便于以后的使用。</p>
<h2 id="二、文本获取高度的方式："><a href="#二、文本获取高度的方式：" class="headerlink" title="二、文本获取高度的方式："></a>二、文本获取高度的方式：</h2><p>通常计算文本的高度使用以下两种方式，通过计算出来的高度计算父控件的总高度。</p>
<ol>
<li><p>通过UILabel sizeThatFits获取文本的高度</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, 100, 1)]; </div><div class="line">label.font = [UIFont systemFontOfSize:14]; label.numberOfLines = 0; label.attributedText = attributeString; </div><div class="line">CGSize size = [label sizeThatFits:CGSizeMake(label.frame.size.width, CGFLOAT_MAX)]; </div><div class="line">NSLog(@&quot;size:%@&quot;, NSStringFromCGSize(size)); </div><div class="line">NSLog(@&quot;label.frame.size:%@&quot;, NSStringFromCGSize(label.frame.size));</div></pre></td></tr></table></figure>
</li>
<li><p>boundingWithRect</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">NSString *text = @&quot;恰同学少年，风华正茂&quot;; </div><div class="line">NSMutableAttributedString *attributeString = [[NSMutableAttributedString alloc] initWithString:text]; </div><div class="line">NSMutableParagraphStyle *style = [[NSMutableParagraphStyle alloc] init]; style.lineSpacing = 10;  </div><div class="line">[attributeString addAttribute:NSParagraphStyleAttributeName value:style range:NSMakeRange(0, text.length)]; </div><div class="line">[attributeString addAttribute:NSFontAttributeName value:[UIFont systemFontOfSize:14] range:NSMakeRange(0, text.length)]; NSStringDrawingOptions options = NSStringDrawingUsesLineFragmentOrigin | NSStringDrawingUsesFontLeading;  </div><div class="line">CGRect rect = [attributeString boundingRectWithSize:CGSizeMake(100, MAXFLOAT) options:options context:nil];</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="三、中文富文本有行间距的坑："><a href="#三、中文富文本有行间距的坑：" class="headerlink" title="三、中文富文本有行间距的坑："></a>三、中文富文本有行间距的坑：</h2><ol>
<li>计算文字高度的坑：<br>以上两种计算方式在计算带有中文，并且有行间距的富文本时，会出现在计算一行时，文本高度不对，多了一个行间距的高度。但在计算纯英文时却不会存在这个情况。这样会导致在存在父控件时，父控件整体高度计算不对。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/132693-e50fbce7662fd5f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<ol>
<li>给Label设置文本的坑：<br>在给Label设置富文本时，如果是一行并且带中文，并且设置了间距lineSpace，结果多发现显示出来多了一个间距的高度。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/132693-49b6fffefbf2ac1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h2 id="四、解决方案："><a href="#四、解决方案：" class="headerlink" title="四、解决方案："></a>四、解决方案：</h2><ol>
<li>计算文字高度的坑：<br>判断行数与是否存在中文，当行数为一行，并且存在中文时，需要将计算结果的高度减去行间距。此时才为正确文本正确高度。</li>
<li>给Label设置文本的坑：<br>需要判断是否超过一行，超过一行不设置富文本的lineSpace。<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> //文本的高度减去字体高度小于等于行间距，判断为当前只有1行</div><div class="line">if ((rect.size.height - _font.lineHeight) &lt;= paragraphStyle.lineSpacing)&#123;</div><div class="line">    if ([self containChinese:str]) &#123; //如果包含中文 </div><div class="line">        rect = CGRectMake(rect.origin.x, rect.origin.y, rect.size.width, rect.size.height-paragraphStyle.lineSpacing);</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"></div><div class="line">//判断如果包含中文</div><div class="line">- (BOOL)containChinese:(NSString *)str &#123;</div><div class="line">    for(int i=0; i&lt; [str length];i++)&#123; int a = [str characterAtIndex:i];</div><div class="line">      if( a &gt; 0x4e00 &amp;&amp; a &lt; 0x9fff)&#123; </div><div class="line">          return YES; </div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    return NO;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/132693-45f57c34caf86711.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h2 id="五、封装与使用（便于以后的使用）"><a href="#五、封装与使用（便于以后的使用）" class="headerlink" title="五、封装与使用（便于以后的使用）"></a>五、封装与使用（便于以后的使用）</h2><p>对NSString进行以下方法的增加。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 计算文字高度，可以处理计算带行间距的</div><div class="line"> */</div><div class="line">- (CGSize)boundingRectWithSize:(CGSize)size font:(UIFont*)font  lineSpacing:(CGFloat)lineSpacing</div><div class="line">&#123;</div><div class="line">    NSMutableAttributedString *attributeString = [[NSMutableAttributedString alloc] initWithString:self];</div><div class="line">    NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc] init];</div><div class="line">    paragraphStyle.lineSpacing = lineSpacing;</div><div class="line">    [attributeString addAttribute:NSParagraphStyleAttributeName value:paragraphStyle range:NSMakeRange(0, self.length)];</div><div class="line">    [attributeString addAttribute:NSFontAttributeName value:font range:NSMakeRange(0, self.length)];</div><div class="line">    NSStringDrawingOptions options = NSStringDrawingUsesLineFragmentOrigin | NSStringDrawingUsesFontLeading;</div><div class="line">    CGRect rect = [attributeString boundingRectWithSize:size options:options context:nil];</div><div class="line">    </div><div class="line">//    NSLog(@&quot;size:%@&quot;, NSStringFromCGSize(rect.size));</div><div class="line">    </div><div class="line">    //文本的高度减去字体高度小于等于行间距，判断为当前只有1行</div><div class="line">    if ((rect.size.height - font.lineHeight) &lt;= paragraphStyle.lineSpacing) &#123;</div><div class="line">        if ([self containChinese:self]) &#123;  //如果包含中文</div><div class="line">            rect = CGRectMake(rect.origin.x, rect.origin.y, rect.size.width, rect.size.height-paragraphStyle.lineSpacing);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    return rect.size;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">//判断如果包含中文</div><div class="line">- (BOOL)containChinese:(NSString *)str &#123;</div><div class="line">    for(int i=0; i&lt; [str length];i++)&#123; int a = [str characterAtIndex:i];</div><div class="line">      if( a &gt; 0x4e00 &amp;&amp; a &lt; 0x9fff)&#123; </div><div class="line">          return YES; </div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    return NO;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> *  计算最大行数文字高度,可以处理计算带行间距的</div><div class="line"> */</div><div class="line">- (CGFloat)boundingRectWithSize:(CGSize)size font:(UIFont*)font  lineSpacing:(CGFloat)lineSpacing maxLines:(NSInteger)maxLines&#123;</div><div class="line">   </div><div class="line">    if (maxLines &lt;= 0) &#123;</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    CGFloat maxHeight = font.lineHeight * maxLines + lineSpacing * (maxLines - 1);</div><div class="line">    </div><div class="line">    CGSize orginalSize = [self boundingRectWithSize:size font:font lineSpacing:lineSpacing];</div><div class="line">    </div><div class="line">    if ( orginalSize.height &gt;= maxHeight ) &#123;</div><div class="line">        return maxHeight;</div><div class="line">    &#125;else&#123;</div><div class="line">        return orginalSize.height;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> *  计算是否超过一行   用于给Label 赋值attribute text的时候 超过一行设置lineSpace</div><div class="line"> */</div><div class="line">- (BOOL)isMoreThanOneLineWithSize:(CGSize)size font:(UIFont *)font lineSpaceing:(CGFloat)lineSpacing&#123;</div><div class="line">    </div><div class="line">    if ( [self boundingRectWithSize:size font:font lineSpacing:lineSpacing].height &gt; font.lineHeight  ) &#123;</div><div class="line">        return YES;</div><div class="line">    &#125;else&#123;</div><div class="line">       return NO;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="六、测试项目Demo地址："><a href="#六、测试项目Demo地址：" class="headerlink" title="六、测试项目Demo地址："></a>六、测试项目Demo地址：</h2><p><a href="https://github.com/casscqt/lineSpaceTextHeightDemo" target="_blank" rel="external">https://github.com/casscqt/lineSpaceTextHeightDemo</a></p>
<p>参考来源：<a href="http://www.jianshu.com/p/4733af4774ec" target="_blank" rel="external">http://www.jianshu.com/p/4733af4774ec</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;前段时间来了一个新设计，将App的风格修改了一遍。在显示文字时，增加了行间距。原本以为只是展示和计算高度的时候添加上富文本的lineSpace属性即可，但是结果在显示一行中文的时候，却怎么也计算字体的时候多了一个行间距的高度，展示的Label也多了一个行间距的高度。经过查找资料，网上也有人遇到同样的坑。计算高度时，需要将判断一下是否中文与一行，如果是一行带中文并且有行间距，此时总体高度应该减去行间距。展示的Label如果用的是自适应高度，也应该做一下判断，一行中文带行间距时，不设置Label的lineSpace属性。如果你也遇到这样坑，可以通过本文章的Demo解决，并封装好一些方法，便于以后的使用。&lt;/p&gt;
&lt;h2 id=&quot;二、文本获取高度的方式：&quot;&gt;&lt;a href=&quot;#二、文本获取高度的方式：&quot; class=&quot;headerlink&quot; title=&quot;二、文本获取高度的方式：&quot;&gt;&lt;/a&gt;二、文本获取高度的方式：&lt;/h2&gt;&lt;p&gt;通常计算文本的高度使用以下两种方式，通过计算出来的高度计算父控件的总高度。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;通过UILabel sizeThatFits获取文本的高度&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, 100, 1)]; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;label.font = [UIFont systemFontOfSize:14]; label.numberOfLines = 0; label.attributedText = attributeString; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CGSize size = [label sizeThatFits:CGSizeMake(label.frame.size.width, CGFLOAT_MAX)]; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;NSLog(@&amp;quot;size:%@&amp;quot;, NSStringFromCGSize(size)); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;NSLog(@&amp;quot;label.frame.size:%@&amp;quot;, NSStringFromCGSize(label.frame.size));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;boundingWithRect&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;NSString *text = @&amp;quot;恰同学少年，风华正茂&amp;quot;; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;NSMutableAttributedString *attributeString = [[NSMutableAttributedString alloc] initWithString:text]; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;NSMutableParagraphStyle *style = [[NSMutableParagraphStyle alloc] init]; style.lineSpacing = 10;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[attributeString addAttribute:NSParagraphStyleAttributeName value:style range:NSMakeRange(0, text.length)]; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[attributeString addAttribute:NSFontAttributeName value:[UIFont systemFontOfSize:14] range:NSMakeRange(0, text.length)]; NSStringDrawingOptions options = NSStringDrawingUsesLineFragmentOrigin | NSStringDrawingUsesFontLeading;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CGRect rect = [attributeString boundingRectWithSize:CGSizeMake(100, MAXFLOAT) options:options context:nil];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;三、中文富文本有行间距的坑：&quot;&gt;&lt;a href=&quot;#三、中文富文本有行间距的坑：&quot; class=&quot;headerlink&quot; title=&quot;三、中文富文本有行间距的坑：&quot;&gt;&lt;/a&gt;三、中文富文本有行间距的坑：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;计算文字高度的坑：&lt;br&gt;以上两种计算方式在计算带有中文，并且有行间距的富文本时，会出现在计算一行时，文本高度不对，多了一个行间距的高度。但在计算纯英文时却不会存在这个情况。这样会导致在存在父控件时，父控件整体高度计算不对。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/132693-e50fbce7662fd5f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;给Label设置文本的坑：&lt;br&gt;在给Label设置富文本时，如果是一行并且带中文，并且设置了间距lineSpace，结果多发现显示出来多了一个间距的高度。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/132693-49b6fffefbf2ac1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;四、解决方案：&quot;&gt;&lt;a href=&quot;#四、解决方案：&quot; class=&quot;headerlink&quot; title=&quot;四、解决方案：&quot;&gt;&lt;/a&gt;四、解决方案：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;计算文字高度的坑：&lt;br&gt;判断行数与是否存在中文，当行数为一行，并且存在中文时，需要将计算结果的高度减去行间距。此时才为正确文本正确高度。&lt;/li&gt;
&lt;li&gt;给Label设置文本的坑：&lt;br&gt;需要判断是否超过一行，超过一行不设置富文本的lineSpace。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://casscqt.github.io/2016/07/23/hexo%E9%83%A8%E7%BD%B2/"/>
    <id>https://casscqt.github.io/2016/07/23/hexo部署/</id>
    <published>2016-07-23T09:16:01.000Z</published>
    <updated>2016-07-23T09:16:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>PK<br>    ���H���q�  �  <br>  Hexo介绍.mdup ��k�Hexo介绍.md</p>
<p>#Hexo介绍</p>
<blockquote>
<p>Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架。通过Hexo我们可以快速创建自己的博客，仅需要几条命令就可以完成。发布时，Hexo可以部署在自己的Node服务器上面，也可以部署github上面。对于个人用户来说，部署在github上好处颇多，不仅可以省去服务器的成本，还可以减少各种系统运维的麻烦事(系统管理、备份、网络)。所以，基于github的个人站点，正在开始流行起来….<br>Hexo的官方网站：<a href="http://hexo.io/" target="_blank" rel="external">http://hexo.io/</a> ，也是基于Github构建的网站。</p>
</blockquote>
<p>#####相关网址：</p>
<ul>
<li><a href="https://hexo.io/" target="_blank" rel="external"><em>Hexo官方</em></a></li>
</ul>
<p>#准备</p>
<ul>
<li><p>NPM<br>安装参考：<a href="http://www.jianshu.com/p/3baed1d862ce" target="_blank" rel="external">http://www.jianshu.com/p/3baed1d862ce</a></p>
</li>
<li><p>Hexo</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div></pre></td></tr></table></figure>
</li>
</ul>
<p>#Hexo使用与部署Github</p>
<p>###使用命令<br>hexo new “新文章”<br>hexo generate  或者 hexo g 静态化处理<br>hexo deploy 或者 hexo d    发布到github</p>
<p>#####第一次需要配置github 与 Hexo的全局配置文件，以便后续的提交github。<br>在github中创建一个博客项目，在Hexo文件夹中配置全局文件_config.yml，找到deploy部分，修改deploy部分如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">    repo: git@github.com:casscqt/casscqt.git</div><div class="line">    type: git</div></pre></td></tr></table></figure></p>
<p>然后，通过命令部署，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>发布:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d</div></pre></td></tr></table></figure></p>
<p>发布后打开查看：<br><a href="http://casscqt.github.io/">http://casscqt.github.io/</a></p>
<p>#SubLime Text 插件<br><a href="https://github.com/revolunet/sublimetext-markdown-preview" target="_blank" rel="external">https://github.com/revolunet/sublimetext-markdown-preview</a></p>
<p>#Mac 分屏</p>
<p>PK <br>    ���H���q�  �  <br>                Hexo介绍.mdup ��k�Hexo介绍.mdPK      Q       </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PK&lt;br&gt;    ���H���q�  �  &lt;br&gt;  Hexo介绍.mdup ��k�Hexo介绍.md&lt;/p&gt;
&lt;p&gt;#Hexo介绍&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架。通过Hexo
    
    </summary>
    
    
  </entry>
  
</feed>
